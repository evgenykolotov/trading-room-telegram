import { Api } from 'telegram';
import { Telegraf } from 'telegraf';
import { InjectBot } from 'nestjs-telegraf';
import { ConfigService } from '@nestjs/config';
import { MessageEntity } from 'telegraf/types';
import { NewMessage, NewMessageEvent } from 'telegram/events';
import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { TelegramClientProvider } from './telegram-client.provider';

@Injectable()
export class TelegramService implements OnModuleInit {
  private readonly logger = new Logger(TelegramService.name);
  private readonly RUSSIA_HASH_TAGS = [
    '–¥–∫–ø',
    'CBDC',
    '–±–∞–Ω–∫–∏',
    '–Ω–µ—Ñ—Ç—å',
    '–º–∞–∫—Ä–æ',
    '—Ç–æ—Ä–≥–∏',
    '—Å–ø–∏–∫–µ—Ä—ã',
    '—Å–æ—Ü—Å–µ—Ç–∏',
    '—Å–∞–Ω–∫—Ü–∏–∏',
    '–ø—Ä–æ–≥–Ω–æ–∑',
    '–∏–Ω—Ñ–ª—è—Ü–∏—è',
    '–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏',
    '–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å',
    '–≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∞',
  ];

  constructor(
    @InjectBot() private bot: Telegraf,
    private readonly configService: ConfigService,
    private readonly telegramClientProvider: TelegramClientProvider,
  ) {}

  onModuleInit(): void {
    const client = this.telegramClientProvider.getClient();

    const MARKET_TWITS_CHANNEL_ID: string = this.configService.get(
      'MARKET_TWITS_CHANNEL_ID',
    ) as string;

    const TRADING_ROOM_GROUP_ID: string = this.configService.get(
      'TRADING_ROOM_GROUP_ID',
    ) as string;

    client.addEventHandler(
      (event: NewMessageEvent) => {
        void (async () => {
          const message = event.message;
          if (message.text) {
            const hashtags = this.extractHashtagsFromEntities(message);

            if (message.text.toUpperCase().includes('–ö–ê–õ–ï–ù–î–ê–†–¨ –ù–ê –°–ï–ì–û–î–ù–Ø')) {
              await this.sendMessageToChannel(+TRADING_ROOM_GROUP_ID, message);
              return;
            }

            if (
              hashtags.includes('—Ä–æ—Å—Å–∏—è') &&
              this.RUSSIA_HASH_TAGS.some((tag) => hashtags.includes(tag))
            ) {
              await this.sendMessageToChannel(+TRADING_ROOM_GROUP_ID, message);
              return;
            }

            if (hashtags.includes('–≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∞')) {
              await this.sendMessageToChannel(+TRADING_ROOM_GROUP_ID, message);
              return;
            }

            if (
              event.message.text.includes('üá∑üá∫') &&
              hashtags.includes('–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å')
            ) {
              await this.sendMessageToChannel(+TRADING_ROOM_GROUP_ID, message);
              return;
            }
          }
        })();
      },
      new NewMessage({ chats: [MARKET_TWITS_CHANNEL_ID] }),
    );

    this.logger.log('Listening for new messages...');
  }

  private async sendMessageToChannel(
    channelId: number,
    message: Api.Message,
  ): Promise<void> {
    try {
      await this.bot.telegram.sendMessage(
        channelId,
        removeMarkdown(message.text),
        {
          disable_notification: true,
          link_preview_options: { is_disabled: true },
          entities: convertEntities(message.entities ?? []),
        },
      );
      this.logger.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª ${channelId}`);
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª ${channelId}`,
        error,
      );
    }
  }

  private extractHashtagsFromEntities(message: Api.Message): string[] {
    const hashtags: string[] = [];

    if (message.entities) {
      for (const entity of message.entities) {
        if (entity instanceof Api.MessageEntityHashtag) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Ö—ç—à—Ç–µ–≥–∞
          const hashtagText = message.text.substring(
            entity.offset,
            entity.offset + entity.length,
          );
          hashtags.push(hashtagText.slice(1)); // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª #
        }
      }
    }

    return hashtags;
  }
}

function convertEntities(entities: Api.TypeMessageEntity[]): MessageEntity[] {
  return entities
    .map((entity) => {
      const baseEntity = {
        offset: entity.offset,
        length: entity.length,
      };

      if (entity instanceof Api.MessageEntityHashtag) {
        return { ...baseEntity, type: 'hashtag' };
      }

      if (entity instanceof Api.MessageEntityBold) {
        return { ...baseEntity, type: 'bold' };
      }

      if (entity instanceof Api.MessageEntityItalic) {
        return { ...baseEntity, type: 'italic' };
      }

      if (entity instanceof Api.MessageEntityUrl) {
        return { ...baseEntity, type: 'url' };
      }

      if (entity instanceof Api.MessageEntityTextUrl) {
        return { ...baseEntity, type: 'text_link', url: entity.url };
      }

      if (entity instanceof Api.MessageEntityMention) {
        return { ...baseEntity, type: 'mention' };
      }

      if (entity instanceof Api.MessageEntityCode) {
        return { ...baseEntity, type: 'code' };
      }

      if (entity instanceof Api.MessageEntityPre) {
        return { ...baseEntity, type: 'pre' };
      }

      if (entity instanceof Api.MessageEntityMentionName) {
        return {
          ...baseEntity,
          type: 'text_mention',
          user: { id: entity.userId },
        };
      }

      return null; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    })
    .filter((entity) => entity !== null) as MessageEntity[];
}

function removeMarkdown(text: string): string {
  // –£–¥–∞–ª—è–µ–º Markdown-—Ä–∞–∑–º–µ—Ç–∫—É
  return text
    .replace(/\*\*(.*?)\*\*/g, '$1') // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç: **—Ç–µ–∫—Å—Ç**
    .replace(/\*(.*?)\*/g, '$1') // –ö—É—Ä—Å–∏–≤: *—Ç–µ–∫—Å—Ç*
    .replace(/__(.*?)__/g, '$1') // –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ: __—Ç–µ–∫—Å—Ç__
    .replace(/~~(.*?)~~/g, '$1') // –ó–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ: ~~—Ç–µ–∫—Å—Ç~~
    .replace(/`(.*?)`/g, '$1') // –ö–æ–¥: `—Ç–µ–∫—Å—Ç`
    .replace(/\[(.*?)\]\((.*?)\)/g, '$1') // –°—Å—ã–ª–∫–∏: [—Ç–µ–∫—Å—Ç](url)
    .replace(/\n>/g, '\n') // –¶–∏—Ç–∞—Ç—ã: > —Ç–µ–∫—Å—Ç
    .replace(/!\[(.*?)\]\((.*?)\)/g, '$1'); // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ![alt](url)
}
